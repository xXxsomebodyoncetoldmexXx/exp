<snippet>
	<description>template for competitive</description>
	<content><![CDATA[#include <bits/stdc++.h>

typedef int64_t ll;
typedef uint64_t ull;
typedef double db;
const double PI  =3.141592653589793238463;

using namespace std;

#ifdef LOCAL_PROJECT
#define CURTIME() cerr << el << "[TIME]: " << clock() * 1.0 / CLOCKS_PER_SEC << "s" << el
#define INFILE(name) freopen(name, "r", stdin)
#define OUFILE(name) freopen(name, "w", stdin)
#else
#define CURTIME() ;
#define INFILE(name) ;
#define OUFILE(name) ;
#endif

#define FASTIO ios_base::sync_with_stdio(false),cin.tie(NULL)
#define mp make_pair
#define mt make_tuple
#define pb push_back
#define fi first
#define se second
#define lb lower_bound
#define ub upper_bound
#define prs(n) cout << fixed << setprecision(n)
#define DEBUG(val) cerr << "#####\nRunning on Line " << __LINE__ << " in Function " << 	__FUNCTION__ << el << val << "#####";
#define el "\n"
#define sp " "

// RNG - for sum fun
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

// Combination calculate
// Note to self: n >= r
// From N pieces pick R pieces
ll nCr(ll n, ll r){
	// The fomular:
	// n! / (r! * (n-r)!)
	// Complexity: O(r)
	ll tmp = n-r;
	for(ll i = n-1; i > tmp; i--)
		n *= i;

	for(ll i = r-1; i > 1; i--)
		r *= i;
	return n/r;
}



int main(int argc, char const${TM_C_POINTER: *}argv[]) {
	FASTIO;
	INFILE("in");
	//${1:OUFILE("out");}

	${0:/* code */}
	CURTIME();
	return 0;
}]]></content>
	<tabTrigger>template</tabTrigger>
	<scope>source.c++, source.objc++</scope>
</snippet>
